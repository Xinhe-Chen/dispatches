import numpy as np
def f(*X):
    pmax= X[0]
    pmin= X[1]
    ramp_rate= X[2]
    min_up_time= X[3]
    min_down_time= X[4]
    marg_cst= X[5]
    no_load_cst= X[6]
    st_time_hot= X[7]
    st_time_warm= X[8]
    st_time_cold= X[9]
    st_cst_hot= X[10]
    st_cst_warm= X[11]
    st_cst_cold= X[12]
    return  0.71273976966567265112218 * pmax - 0.39745173548847384514815 * pmin - 0.32840510691883267879732 * ramp_rate - 0.30693388760841180257222E-002 * min_up_time - 0.64549394889441724654233E-001 * min_down_time + 0.12504869243228181052707 * marg_cst - 0.30565822608836473728289 * st_time_hot + 0.19079695949027908330464 * st_time_warm + 0.26013975356374202663190 * st_time_cold - 0.93888667435570938302192 * pmax**2 - 0.44911535532127305758721 * pmin**2 - 1.4980564549150749975581 * ramp_rate**2 - 0.15320123201520829264721E-002 * min_up_time**2 - 0.21739938162966217227723E-001 * min_down_time**2 + 0.15887687715466600191228E-001 * marg_cst**2 + 0.55000965920230338035424 * st_time_hot**2 - 0.54891123505346979538633E-001 * st_time_cold**2 + 1.2830321700099318604771 * pmax*pmin + 2.4686292333214363559080 * pmax*ramp_rate - 0.43130052611650988858560E-001 * pmax*min_up_time - 0.43853278045985710775767E-001 * pmax*min_down_time + 0.16203660730224683783618 * pmax*marg_cst + 0.93617390554999416196758E-001 * pmax*no_load_cst + 0.34529660788819621641821 * pmax*st_time_hot - 0.17741221593106584752952 * pmax*st_time_warm + 0.82394633690457519392680E-001 * pmax*st_time_cold - 0.16654479435646332707854 * pmax*st_cst_hot - 1.6600288651383319216137 * pmin*ramp_rate + 0.36891373272261794580285E-001 * pmin*min_up_time - 0.11075519386950706535178 * pmin*marg_cst - 0.67507581003326891377903E-001 * pmin*no_load_cst - 0.17347174915842897280349 * pmin*st_time_hot + 0.94903885823527184273374E-001 * pmin*st_time_warm - 0.34977890261985083997232E-001 * pmin*st_time_cold + 0.62110501303729595545811E-001 * pmin*st_cst_hot + 0.56960090317472324150661E-001 * ramp_rate*min_up_time + 0.72896992239148541981031E-001 * ramp_rate*min_down_time - 0.19118672209593035038466 * ramp_rate*marg_cst - 0.11668429237924160535300 * ramp_rate*no_load_cst - 0.44585017496470064068959 * ramp_rate*st_time_hot + 0.21804616308068380803320 * ramp_rate*st_time_warm - 0.11189531179396965121509 * ramp_rate*st_time_cold + 0.31514794333790913105631 * ramp_rate*st_cst_cold - 0.12536303571592358890863E-001 * min_up_time*marg_cst - 0.30736324939495063973682E-001 * min_up_time*st_time_hot + 0.24593719528433651000388E-001 * min_up_time*st_time_warm - 0.15059318008747154399307E-001 * min_up_time*st_cst_hot - 0.86635507482276774560148E-001 * min_down_time*st_time_hot + 0.35671748424100521712710E-001 * min_down_time*st_time_warm + 0.76714155729209601575214E-001 * min_down_time*st_cst_hot - 0.18631579077963339452495E-001 * marg_cst*no_load_cst + 0.65842146660263861646101E-001 * marg_cst*st_time_hot - 0.52599499385266507145431E-001 * marg_cst*st_time_warm + 0.45385563748822882468303E-001 * no_load_cst*st_time_hot - 0.40222464037691633975680E-001 * no_load_cst*st_time_warm + 0.22685514445037826408713E-001 * (pmax*pmin)**2 + 0.38144831211868436560142E-001 * (pmax*ramp_rate)**2 - 0.55719887726902110614002E-001 * (pmax*st_time_hot)**2 + 0.12313710638758830831496E-001 * (pmax*st_time_warm)**2 - 0.32389058155033734198724E-001 * (pmax*st_cst_hot)**2 - 0.30206148268928516981147E-001 * (pmin*ramp_rate)**2 - 0.90280446733125921388030E-002 * (pmin*marg_cst)**2 + 0.29133245121134663385698E-002 * (pmin*st_time_hot)**2 - 0.81772771309499021202827E-002 * (ramp_rate*min_up_time)**2 - 0.71613013750940479607010E-002 * (ramp_rate*min_down_time)**2 + 0.47160471362183596297224E-002 * (ramp_rate*marg_cst)**2 + 0.26488629965556051426567E-001 * (ramp_rate*st_time_hot)**2 - 0.60968042920466161693760E-001 * (ramp_rate*st_time_warm)**2 - 0.43375747262353867017559E-001 * (ramp_rate*st_time_cold)**2 + 0.10544887338202461879444 * (ramp_rate*st_cst_hot)**2 + 0.10255129535368888091251E-001 * (min_up_time*st_time_hot)**2 + 0.40911089582582056689564E-001 * (min_down_time*st_time_hot)**2 - 0.13217439596341824109560E-001 * (no_load_cst*st_cst_hot)**2 
